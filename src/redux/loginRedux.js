// the slice part
import { createSlice } from '@reduxjs/toolkit';
import accounts from './Accounts';

// Define the initial state of the login slice
const initialState = {
  username: '',
  password: '',
  isAuthenticated: false,
  error: null
};

// Create a login slice with reducers
const loginSlice = createSlice({
  name: 'login',
  initialState,
  reducers: {
    // Set the username in the state to the value passed as the action payload
    setUsername(state, action) {
      state.username = action.payload;
    },
    // Set the password in the state to the value passed as the action payload
    setPassword(state, action) {
      state.password = action.payload;
    },
    // Set isAuthenticated to true and error to null
    loginSuccess(state) {
      state.isAuthenticated = true;
      state.error = null;
    },
    // Set isAuthenticated to false and error to the value passed as the action payload
    loginFailed(state, action) {
      state.isAuthenticated = false;
      state.error = action.payload;
    }
  }
});

// Export the actions generated by createSlice
export const { setUsername, setPassword, loginSuccess, loginFailed } =
  loginSlice.actions;

// Define the login thunk action
export const login = () => (dispatch, getState) => {
  // Get the username and password from the state
  const { username, password } = getState().login;

  // Find an account in the accounts array that matches the entered username and password
  const account = accounts.find(
    account => account.owner === username && account.pin === Number(password)
  );

  // If an account is found, dispatch the loginSuccess action
  if (account) {
    dispatch(loginSuccess());
  } else {
    // If no account is found, dispatch the loginFailed action with an error message
    dispatch(loginFailed('Invalid username or password'));
  }
};

// Export the reducer generated by createSlice
export default loginSlice.reducer;
